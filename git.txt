git init - инициализирует пустой git репозиторий
git branch - просмотр существующих веток
git branch -a - просмотр всех (в т.ч. удаленных) веток
git branch -f master hash - переключиться на master к коммиту hash (можно использовать для отката, тогда останется другая ветка с изменениями)
git branch -f master fix - перевод ветки master к последнему коммиту ветки fix
git branch -d fix - удалить ветку fix (если до этого был merge)
git branch -D fix - удалить ветку fix, даже если в ней незакоммиченные изменения
git reset - снять индексацию с изменений
git reset HEAD .vscode - снять с индексации директорию .vscode
git reset --hard HEAD - отмена измненений во всех файлах
git reset --hard tagname - отмена последних коммитов, переход к состоянию tagname (в логах тоже не будут видны последние коммиты)
git reset index.html - отмена индексации для index.html
git checkout <filename>  - отмена изменений в filename
git checkout -b work - перейти в ветку work, флаг -b указывает, что если она не существует, то создать
git checkout -f - отмена всех незакоммиченных изменений
git checkout hash index.html - возврат к коммиту hash только для файла index.html
git status - показывает изменения
git add . - добавить изменения ( . корень каталога, т.е. будут внесены изменения из всех файлов)
git add -p index.html - позволяет выбрать какие именно изменения в файле нужно добавить в коммит (возможно для разбиения на части нужно будет выбрать первым ответом s )
git commit -m 'описание коммита'
git commit --amend -m 'новое описание коммита' - изменение предыдущего коммита (после повторного add)
git commit -am "описание коммита" - git add . + git commit -m "описание коммита"
git merge work - слияние с веткой work
git branch -f master ORIG_HEAD - откатить изменения после слияния (вернуться к предыдущему состояния ветки master до команды merge)
git merge origin/main
git push origin master - отправка в репозиторий (ветка  master)
git pull origin main - скачивание данных с сервера (ветка main)
git pull - эквивалентно выполнению последовательно git fetch и git merge origin/master
git log - список произведенных изменений
git log --pretty=oneline - однострочный формат
git log --pretty=format:"%h %ad | %s%d [%an]" --graph --date=short - история
git log --pretty=format:"%h %ad | %s%d [%an]" --graph --date=short --all - вся история (даже отмененные коммиты)
	--pretty="..." — определяет формат вывода.
	%h — укороченный хэш коммита
	%d — дополнения коммита («головы» веток или теги)
	%ad — дата коммита
	%s — комментарий
	%an — имя автора
	--graph — отображает дерево коммитов в виде ASCII-графика
	--date=short — сохраняет формат даты коротким и симпатичным
git tag tagname - текущее состояние помечается тегом tagname
git checkout tagname - перейти к состоянию помеченному тегом tagname
git tag - выводит доступные теги
git tag -d tagname - удаляет tagname и коммиты, на которые он ссылался
git revert HEAD - отмена последнего коммита
git revert <hash> - отмена коммита по хешу
git rebase master - объединить ветку с веткой master
git clone repositoryname cloned_repositoryname - клонирование репозитория
git remote - имя по умолчанию удаленного репозитория
git remote show origin - более подробная информация об имени по умолчанию
git fetch - забирает изменения удаленной ветки (напр забрать изменения из основной в клонированную)
git stash - сохраняет незакоммиченные изменения в отдельный файл
git stash pop - возврат незакоммиченных изменений в файл, которые ранее были сохранены в отдельный файл командой git stash
git show HEAD~ (git show @~) - показывает родитель текущего коммита (git show @~2 - коммит 2 раза назад)
git show :/search_name - поиск слова search_name в коммитах, показывает самый свежий коммит с search_name в названии
